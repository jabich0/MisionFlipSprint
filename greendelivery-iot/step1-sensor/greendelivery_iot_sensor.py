#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
GreenDelivery IoT Sensor Simulator - Pharmaceutical Edition
===========================================================
Simulador de sensor IoT para monitorear transporte de medicamentos y productos farmac√©uticos cr√≠ticos
Genera y env√≠a datos de telemetr√≠a en tiempo real a un endpoint HTTPS con control de cadena de fr√≠o

Autor: Equipo de Ingenier√≠a de Datos
Versi√≥n: 1.0 - Pharmaceutical
"""

import json
import time
import random
import datetime
import sys
import os

# Intentar importar requests, si no est√° disponible usar urllib
try:
    import requests
    USAR_REQUESTS = True
    print("‚úÖ Usando librer√≠a requests")
except ImportError:
    import urllib.request
    import urllib.parse
    USAR_REQUESTS = False
    print("‚ö†Ô∏è  Usando urllib (instala 'requests' para mejor experiencia)")
    
import paho.mqtt.client as mqtt

# Configuraci√≥n MQTT opcional (si el broker est√° disponible)
MQTT_HOST = os.getenv("MQTT_HOST", None)
MQTT_PORT = int(os.getenv("MQTT_PORT", "1883"))
MQTT_TOPIC = os.getenv("MQTT_TOPIC", "sensors/temperature")

mqtt_client = None
if MQTT_HOST:
    try:
        mqtt_client = mqtt.Client()
        mqtt_client.connect(MQTT_HOST, MQTT_PORT, 60)
        print(f"üì° Conectado a broker MQTT: {MQTT_HOST}:{MQTT_PORT}")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo conectar al broker MQTT: {e}")
        mqtt_client = None

class GreenDeliveryPharmaIoTSensor:
    """
    Simulador de sensor IoT para GreenDelivery - Divisi√≥n Farmac√©utica
    Monitorea temperatura, humedad, GPS y aceler√≥metro para transporte de medicamentos
    """
    
    def __init__(self, envio_id=None, endpoint_url=None, ubicacion_inicio=None):
        """
        Inicializa el sensor IoT farmac√©utico
        
        Args:
            envio_id (str): ID √∫nico del env√≠o farmac√©utico (ej: "GD-MEDS-001")
            endpoint_url (str): URL del endpoint en la nube
            ubicacion_inicio (tuple): (latitud, longitud) de inicio
        """
        self.envio_id = envio_id or f"GD-MEDS-{random.randint(1000, 9999)}"
        self.endpoint_url = endpoint_url or "https://webhook.site/ddcd421e-bf7c-490a-9b49-613d06c7ed5c"  # ‚úÖ WEBHOOK.SITE URL
        
        # Ubicaci√≥n inicial (por defecto Madrid, Espa√±a - Centro de Distribuci√≥n Farmac√©utica)
        if ubicacion_inicio:
            self.latitud, self.longitud = ubicacion_inicio
        else:
            self.latitud = 40.4168 + random.uniform(-0.02, 0.02)  # Madrid con variaci√≥n
            self.longitud = -3.7038 + random.uniform(-0.02, 0.02)
        
        # Par√°metros base del env√≠o farmac√©utico
        self.temperatura_base = random.uniform(3.0, 6.0)  # Temperatura refrigeraci√≥n farmac√©utica (2-8¬∞C)
        self.humedad_base = random.uniform(70, 85)        # Humedad t√≠pica para medicamentos
        self.velocidad_movimiento = random.uniform(0.0003, 0.0008)  # Velocidad GPS
        
        # Estad√≠sticas
        self.total_envios = 0
        self.envios_exitosos = 0
        self.alertas_generadas = 0
        
        print(f"üíä Sensor IoT Farmac√©utico inicializado")
        print(f"üì¶ Env√≠o medicamentos: {self.envio_id}")
        print(f"üìç Ubicaci√≥n inicial: {self.latitud:.4f}, {self.longitud:.4f}")
        print(f"üåê Endpoint: {self.endpoint_url}")
    
    def generar_datos_telemetria(self):
        """
        Genera datos de telemetr√≠a realistas para transporte farmac√©utico
        
        Returns:
            dict: Datos del sensor con timestamp, temperatura, humedad, GPS, aceler√≥metro
        """
        # === TEMPERATURA ===
        # Variaci√≥n natural ¬±2¬∞C, con posibilidad de fallo en refrigeraci√≥n
        variacion_temp = random.uniform(-2.0, 2.0)
        
        # 3% probabilidad de fallo en refrigeraci√≥n (cr√≠tico para medicamentos)
        if random.random() < 0.03:
            variacion_temp += random.uniform(3.0, 7.0)  # Fallo de refrigeraci√≥n farmac√©utica
            
        temperatura = self.temperatura_base + variacion_temp
        
        # === HUMEDAD ===
        # Variaci√≥n natural ¬±10% (cr√≠tica para estabilidad de medicamentos)
        humedad = self.humedad_base + random.uniform(-10, 10)
        humedad = max(0, min(100, humedad))  # Limitar entre 0-100%
        
        # === GPS (MOVIMIENTO) ===
        # Simular movimiento del veh√≠culo farmac√©utico
        self.latitud += random.uniform(-self.velocidad_movimiento, self.velocidad_movimiento)
        self.longitud += random.uniform(-self.velocidad_movimiento, self.velocidad_movimiento)
        
        # === ACELER√ìMETRO ===
        # Condiciones normales: 0.8-1.2G
        # Impactos/golpes: 2.5-5.0G (5% probabilidad) - cr√≠tico para medicamentos fr√°giles
        if random.random() < 0.05:  # 5% probabilidad de impacto
            acelerometro_z = random.uniform(2.5, 5.0)
        else:
            acelerometro_z = random.uniform(0.8, 1.2)
        
        # === CREAR PAYLOAD JSON ===
        datos = {
            "ID_envio": self.envio_id,
            "timestamp": datetime.datetime.now().isoformat(),
            "temperatura": round(temperatura, 2),
            "humedad": round(humedad, 1),
            "latitud": round(self.latitud, 6),
            "longitud": round(self.longitud, 6),
            "acelerometro_ejeZ": round(acelerometro_z, 2),
            "estado_sensor": "ACTIVO",
            "bateria": round(random.uniform(85, 100), 1),  # Nivel de bater√≠a
            "tipo_carga": "MEDICAMENTOS",
            "temperatura_objetivo": "2-8¬∞C"
        }
        
        return datos
    
    def detectar_anomalias(self, datos):
        """
        Detecta anomal√≠as cr√≠ticas en el transporte farmac√©utico
        
        Args:
            datos (dict): Datos de telemetr√≠a
            
        Returns:
            list: Lista de alertas detectadas
        """
        alertas = []
        
        # Regla 1: Temperatura excedida (cadena de fr√≠o farmac√©utica rota)
        if datos['temperatura'] > 8.0:
            alertas.append({
                "tipo": "TEMPERATURA_CRITICA_FARMACEUTICA",
                "mensaje": f"CADENA DE FR√çO ROTA: {datos['temperatura']}¬∞C > 8¬∞C - Medicamentos en riesgo",
                "severidad": "CRITICA",
                "timestamp": datos['timestamp'],
                "impacto": "P√©rdida potencial de eficacia medicamentos"
            })
        
        # Regla 2: Impacto detectado (medicamentos fr√°giles)
        if datos['acelerometro_ejeZ'] > 3.0:
            alertas.append({
                "tipo": "IMPACTO_MEDICAMENTOS", 
                "mensaje": f"IMPACTO DETECTADO: {datos['acelerometro_ejeZ']}G > 3G - Posible da√±o a medicamentos",
                "severidad": "ALTA",
                "timestamp": datos['timestamp'],
                "impacto": "Riesgo de rotura de viales/ampollas"
            })
        
        # Regla 3: Humedad muy baja (medicamentos se degradan)
        if datos['humedad'] < 50:
            alertas.append({
                "tipo": "HUMEDAD_CRITICA_FARMACEUTICA",
                "mensaje": f"HUMEDAD CR√çTICA: {datos['humedad']}% < 50% - Degradaci√≥n medicamentos",
                "severidad": "MEDIA",
                "timestamp": datos['timestamp'],
                "impacto": "P√©rdida de estabilidad farmacol√≥gica"
            })
        
        return alertas
    
    def enviar_con_requests(self, datos):
        """Env√≠a datos usando la librer√≠a requests"""
        try:
            response = requests.post(
                self.endpoint_url,
                json=datos,
                headers={
                    'Content-Type': 'application/json',
                    'User-Agent': 'GreenDelivery-Pharma-IoT/1.0'
                },
                timeout=15
            )
            return response.status_code == 200, response.status_code
        except Exception as e:
            return False, str(e)
    
    def enviar_con_urllib(self, datos):
        """Env√≠a datos usando urllib (sin dependencias)"""
        try:
            json_data = json.dumps(datos).encode('utf-8')
            req = urllib.request.Request(
                self.endpoint_url,
                data=json_data,
                headers={
                    'Content-Type': 'application/json',
                    'User-Agent': 'GreenDelivery-Pharma-IoT/1.0'
                }
            )
            
            with urllib.request.urlopen(req, timeout=15) as response:
                return response.status == 200, response.status
        except Exception as e:
            return False, str(e)
    
    def enviar_datos(self, datos):
        """
        Env√≠a datos al endpoint configurado
        
        Args:
            datos (dict): Datos de telemetr√≠a a enviar
            
        Returns:
            bool: True si el env√≠o fue exitoso
        """
        self.total_envios += 1
        
        # Elegir m√©todo de env√≠o seg√∫n disponibilidad
        if USAR_REQUESTS:
            exito, codigo = self.enviar_con_requests(datos)
        else:
            exito, codigo = self.enviar_con_urllib(datos)
        
        # Mostrar resultado
        timestamp = datos['timestamp'][11:19]  # Solo la hora
        if exito:
            self.envios_exitosos += 1
            print(f"‚úÖ [{timestamp}] Datos enviados - Medicamentos: {datos['ID_envio']}")
            print(f"   üå°Ô∏è  {datos['temperatura']}¬∞C | üíß {datos['humedad']}% | ‚ö° {datos['acelerometro_ejeZ']}G | üîã {datos['bateria']}%")
        else:
            print(f"‚ùå [{timestamp}] Error en env√≠o: {codigo}")
        
        # Detectar y mostrar alertas
        alertas = self.detectar_anomalias(datos)
        for alerta in alertas:
            self.alertas_generadas += 1
            severidad_emoji = {"CRITICA": "üö®", "ALTA": "‚ö†Ô∏è", "MEDIA": "üí°"}
            emoji = severidad_emoji.get(alerta['severidad'], "‚ÑπÔ∏è")
            print(f"   {emoji} ALERTA {alerta['severidad']}: {alerta['mensaje']}")
            if alerta.get('impacto'):
                print(f"      üîç Impacto: {alerta['impacto']}")
                
            if mqtt_client:
            try:
                mqtt_client.publish(MQTT_TOPIC, json.dumps(datos))
                print(f"üì§ Datos publicados en MQTT ({MQTT_TOPIC})")
            except Exception as e:
                print(f"‚ö†Ô∏è Error publicando en MQTT: {e}")
        
        return exito
    
    def mostrar_estadisticas(self):
        """Muestra estad√≠sticas del monitoreo farmac√©utico"""
        exito_pct = (self.envios_exitosos / self.total_envios * 100) if self.total_envios > 0 else 0
        print("\n" + "="*50)
        print("üìä ESTAD√çSTICAS DEL MONITOREO FARMAC√âUTICO")
        print("="*50)
        print(f"üíä Env√≠o medicamentos monitoreado: {self.envio_id}")
        print(f"üì° Total de transmisiones: {self.total_envios}")
        print(f"‚úÖ Transmisiones exitosas: {self.envios_exitosos} ({exito_pct:.1f}%)")
        print(f"üö® Alertas farmac√©uticas generadas: {self.alertas_generadas}")
        print(f"üìç √öltima ubicaci√≥n: {self.latitud:.4f}, {self.longitud:.4f}")
        print(f"‚ùÑÔ∏è  Rango temperatura objetivo: 2-8¬∞C")
    
    def iniciar_monitoreo(self, intervalo=5, duracion=None, modo_demo=False):
        """
        Inicia el monitoreo continuo del sensor farmac√©utico
        
        Args:
            intervalo (int): Segundos entre transmisiones (por defecto 5)
            duracion (int): Duraci√≥n total en segundos (None = infinito)
            modo_demo (bool): Si es True, hace una demostraci√≥n corta
        """
        if modo_demo:
            print("üé¨ MODO DEMOSTRACI√ìN FARMAC√âUTICA ACTIVADO")
            duracion = 30  # 30 segundos de demo
            intervalo = 3   # Cada 3 segundos
        
        print(f"üöÄ INICIANDO MONITOREO IoT FARMAC√âUTICO")
        print(f"üíä Tipo de carga: MEDICAMENTOS (cadena de fr√≠o 2-8¬∞C)")
        print(f"‚è±Ô∏è  Intervalo: {intervalo} segundos")
        if duracion:
            print(f"‚è∞ Duraci√≥n: {duracion} segundos")
        print("üõë Presiona Ctrl+C para detener")
        print("="*50)
        
        inicio = time.time()
        
        try:
            while True:
                # Generar y enviar datos
                datos = self.generar_datos_telemetria()
                self.enviar_datos(datos)
                
                # Verificar duraci√≥n m√°xima
                if duracion and (time.time() - inicio) >= duracion:
                    print(f"\n‚è∞ Monitoreo farmac√©utico completado: {duracion}s transcurridos")
                    break
                
                print()  # L√≠nea en blanco
                time.sleep(intervalo)
                
        except KeyboardInterrupt:
            print("\nüõë Monitoreo farmac√©utico detenido por el usuario")
        
        finally:
            self.mostrar_estadisticas()


def main():
    """Funci√≥n principal del programa"""
    print("üíä GreenDelivery Pharmaceutical IoT Sensor Simulator v1.0")
    print("=" * 60)
    
    # Configuraci√≥n del sensor farmac√©utico
    sensor = GreenDeliveryPharmaIoTSensor(
        envio_id="GD-MEDS-2025-001",
        endpoint_url="https://webhook.site/ddcd421e-bf7c-490a-9b49-613d06c7ed5c",  # ‚úÖ TU WEBHOOK.SITE
        ubicacion_inicio=(40.4168, -3.7038)  # Madrid, Espa√±a - Centro de Distribuci√≥n Farmac√©utica
    )
    
    print("\nüéØ OPCIONES DE EJECUCI√ìN:")
    print("1. Demostraci√≥n r√°pida (30s) - Monitoreo farmac√©utico")
    print("2. Monitoreo continuo - Cadena de fr√≠o medicamentos")
    print("3. Generar solo un dato de prueba farmac√©utica")
    
    try:
        opcion = input("\nElige una opci√≥n (1-3): ").strip()
        
        if opcion == "1":
            sensor.iniciar_monitoreo(modo_demo=True)
        elif opcion == "2":
            print("\n‚öôÔ∏è Configuraci√≥n personalizada:")
            try:
                intervalo = int(input("Intervalo entre env√≠os en segundos (5): ") or 5)
                duracion_str = input("Duraci√≥n total en segundos (Enter para infinito): ").strip()
                duracion = int(duracion_str) if duracion_str else None
            except ValueError:
                intervalo, duracion = 5, None
            
            sensor.iniciar_monitoreo(intervalo=intervalo, duracion=duracion)
        elif opcion == "3":
            datos = sensor.generar_datos_telemetria()
            print("\nüìä DATOS FARMAC√âUTICOS DE EJEMPLO:")
            print(json.dumps(datos, indent=2, ensure_ascii=False))
            
            # Detectar alertas
            alertas = sensor.detectar_anomalias(datos)
            if alertas:
                print("\nüö® ALERTAS FARMAC√âUTICAS DETECTADAS:")
                for alerta in alertas:
                    print(f"- {alerta['severidad']}: {alerta['mensaje']}")
                    if alerta.get('impacto'):
                        print(f"  Impacto: {alerta['impacto']}")
        else:
            print("‚ùå Opci√≥n no v√°lida")
    
    except KeyboardInterrupt:
        print("\nüëã Programa farmac√©utico terminado por el usuario")
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")


if __name__ == "__main__":
    main()
